        using (StreamReader sreader = File.OpenText(file_name))
                {
                    string str_ln = String.Empty;
                    while ((str_ln = sreader.ReadLine()) != null)
                    {
                        // read line by line
                        if (str_ln.Substring(0, 3) == "[+]")
                        {
                            string[] str_elem_type = str_ln.Substring(4).Split(',');

                            // store the number of elements
                            int n_count = 0;
                            int.TryParse(str_elem_type[1], out n_count);

                            if (str_elem_type[0] == "End Points")
                            {
                                // Read all End points
                                str_end_pts = new string[n_count];
                                for (i = 0; i < n_count; i++)
                                {
                                    // Add all the end points to string list
                                    str_end_pts[i] = sreader.ReadLine();
                                }
                            }
                            else if (str_elem_type[0] == "Lines")
                            {
                                // Read all Lines
                                str_lines = new string[n_count];
                                for (i = 0; i < n_count; i++)
                                {
                                    // Add all the lines to string list
                                    str_lines[i] = sreader.ReadLine();
                                }
                            }
                            else if (str_elem_type[0] == "Arcs")
                            {
                                // Read all Arcs
                                str_arcs = new string[n_count];
                                for (i = 0; i < n_count; i++)
                                {
                                    // Each arc has 3 lines of inputs
                                    str_arcs[i] = sreader.ReadLine() + ",";
                                    for (j = 0; j < 2; j++)
                                    {
                                        // Add all the arcs to string list
                                        str_arcs[i] = str_arcs[i] + sreader.ReadLine() + ",";
                                    }
                                }

                            }
                            else if (str_elem_type[0] == "Beziers")
                            {
                                // Read all Beziers
                                str_beziers = new string[n_count];
                                for (i = 0; i < n_count; i++)
                                {
                                    // Each beziers has 1,2 or 3 control points (2 end points)
                                    string[] str_temp = sreader.ReadLine().Split(",");
                                    str_beziers[i] = str_temp[0] + ", " + str_temp[1] + ", " + str_temp[2] + ", ";
                                    int index0 = str_temp[3].IndexOf('@');

                                    int cntrl_count = 0;
                                    int.TryParse(str_temp[3].Substring(index0 + 1), out cntrl_count);

                                    for (j = 0; j < cntrl_count; j++)
                                    {
                                        // Add all the beziers to string list
                                        str_beziers[i] = str_beziers[i] + sreader.ReadLine() + ",";
                                    }
                                }

                            }
                            else if (str_elem_type[0] == "Surfaces")
                            {
                                // Read all surfaces
                                str_surfaces = new string[n_count];
                                for (i = 0; i < n_count; i++)
                                {
                                    str_surfaces[i] = sreader.ReadLine();
                                    int index0 = str_surfaces[i].IndexOf('@');

                                    int cntrl_count = 0;
                                    int.TryParse(str_surfaces[i].Substring(index0 + 1), out cntrl_count);

                                    // remove the last 3 characters
                                    str_surfaces[i] = str_surfaces[i].Substring(0, str_surfaces[i].Length - 3);

                                    for (j = 0; j < cntrl_count; j++)
                                    {
                                        // Add all the beziers to string list
                                        str_surfaces[i] = str_surfaces[i] + sreader.ReadLine() + ",";
                                    }
                                }
                            }

                        }
                    }
                }



                
        public void set_geometric_properties1()
        {
            //https://leancrew.com/all-this/2018/01/greens-theorem-and-section-properties/
            // Set the cross- section area

            double c_area = 0.0;
            int n = closed_bndry_pts.Count;

            for (int i = 0; i < n - 1; i++)
            {
                c_area = c_area + (closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_y -
                                   closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i).d_y);
            }

            this.bndry_area = (c_area + closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_y -
                                     closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(n - 1).d_y) / 2.0;

            if (this.bndry_area < 0.0)
            {
                // Reverse the points if the area is negative
                this.bndry_area = -1 * this.bndry_area;
                closed_bndry_pts.Reverse();
            }

            // Set the x & y centroid
            double x_center = 0.0, y_center = 0.0;

            for (int i = 0; i < n - 1; i++)
            {
                x_center = x_center + ((closed_bndry_pts.ElementAt(i).d_x + closed_bndry_pts.ElementAt(i + 1).d_x) *
                    (closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_y - closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i).d_y));

                y_center = y_center + ((closed_bndry_pts.ElementAt(i).d_y + closed_bndry_pts.ElementAt(i + 1).d_y) *
                    (closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_y - closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i).d_y));
            }

            x_center = x_center + ((closed_bndry_pts.ElementAt(n - 1).d_x + closed_bndry_pts.ElementAt(0).d_x) *
                    (closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_y - closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(n - 1).d_y));
            y_center = y_center + ((closed_bndry_pts.ElementAt(n - 1).d_y + closed_bndry_pts.ElementAt(0).d_y) *
                    (closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_y - closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(n - 1).d_y));


            this.centroid_x = (x_center / (6 * this.bndry_area));
            this.centroid_y = (y_center / (6 * this.bndry_area));


            // Set the Moments and product of inertia about centroid
            double s_xx = 0.0, s_yy = 0.0, s_xy = 0.0;

            for (int i = 0; i < n - 1; i++)
            {
                s_xx = s_xx + (Math.Pow(closed_bndry_pts.ElementAt(i).d_y, 2) + closed_bndry_pts.ElementAt(i).d_y * closed_bndry_pts.ElementAt(i + 1).d_y + Math.Pow(closed_bndry_pts.ElementAt(i + 1).d_y, 2)) *
                    (closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_y - closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i).d_y);
                s_yy = s_yy + (Math.Pow(closed_bndry_pts.ElementAt(i).d_x, 2) + closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_x + Math.Pow(closed_bndry_pts.ElementAt(i + 1).d_x, 2)) *
                    (closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_y - closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i).d_y);
                s_xy = s_xy + (closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_y + 2 * closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i).d_y + 2 * closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i + 1).d_y + closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i).d_y) *
                    (closed_bndry_pts.ElementAt(i).d_x * closed_bndry_pts.ElementAt(i + 1).d_y - closed_bndry_pts.ElementAt(i + 1).d_x * closed_bndry_pts.ElementAt(i).d_y);

            }
            s_xx = s_xx + (Math.Pow(closed_bndry_pts.ElementAt(n - 1).d_y, 2) + closed_bndry_pts.ElementAt(n - 1).d_y * closed_bndry_pts.ElementAt(0).d_y + Math.Pow(closed_bndry_pts.ElementAt(0).d_y, 2)) *
                   (closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_y - closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(n - 1).d_y);
            s_yy = s_yy + (Math.Pow(closed_bndry_pts.ElementAt(n - 1).d_x, 2) + closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_x + Math.Pow(closed_bndry_pts.ElementAt(0).d_x, 2)) *
                (closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_y - closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(n - 1).d_y);
            s_xy = s_xy + (closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_y + 2 * closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(n - 1).d_y + 2 * closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(0).d_y + closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(n - 1).d_y) *
                (closed_bndry_pts.ElementAt(n - 1).d_x * closed_bndry_pts.ElementAt(0).d_y - closed_bndry_pts.ElementAt(0).d_x * closed_bndry_pts.ElementAt(n - 1).d_y);

            this.moi_x = s_xx;
            this.moi_y = s_yy;
            this.moi_xy = s_xy;

        }



